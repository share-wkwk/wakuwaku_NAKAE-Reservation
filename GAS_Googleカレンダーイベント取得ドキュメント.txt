GPT:https://chatgpt.com/share/68a70ab2-5ea8-800e-8138-265e64935fdb

【目的】
・Googleカレンダーの予定（埋まっている時間）をGASでJSONとして返す
・予約フォーム側は、そのJSONを読んで空き＝「○」、埋まり＝「×」に切り替える

【前提】
・Googleアカウント（対象カレンダーの編集権限あり）
・対象となるGoogleカレンダーの「カレンダーID」
・Apps Script（GAS）にアクセスできること
・予約フォーム側で「カレンダーURL（＝GASのWebアプリURL）」を設定できること

【手順1：カレンダーIDの確認】

Googleカレンダーを開く → 左サイドバーの対象カレンダーの「︙」→［設定と共有］

下部「カレンダーの統合」→「カレンダーID」をコピー（例：xxxx@group.calendar.google.com
）

【手順2：GASプロジェクトの作成】

https://script.google.com/
 →［新しいスクリプトを作成］

エディタに用意済みのコードを貼り付け
　・calendarId = 'カレンダーID' の箇所を、手順1で取得したIDに置き換える（シングルクォート内）
　・コードはアップロード済みテキストの内容をそのまま使用（JSONで予定一覧を返すAPI）

【手順3：スコープと権限（初回のみ）】
・このコードは CalendarApp を使用するため、初回実行またはデプロイ時に権限承認ダイアログが出ます
・指示に従って承認してください（自身のGoogleアカウントを選択）

【手順4：Webアプリとしてデプロイ】

エディタ右上［デプロイ］→［新しいデプロイ］

種類：［ウェブアプリ］

説明：任意（例：予約空き状況API）

実行するユーザー：自分（または必要に応じて）

アクセスできるユーザー：全員（匿名含む）※フォームから直接叩くなら匿名可が簡単

［デプロイ］→ 表示された「WebアプリのURL」をコピー（これがカレンダーURL）

【手順5：動作確認（ブラウザで直接確認）】
・以下のようにクエリを付けて開く
（UTCのISO8601形式。内部で Asia/Tokyo に変換して処理されます）
例：
https://（あなたのWebアプリURL）?startTime=2025-08-21T00:00:00Z&endTime=2025-09-21T00:00:00Z

・JSONが返ればOK（例）
[
{
"title":"予約済みA",
"startTime":"2025-08-22T03:00:00.000Z",
"endTime":"2025-08-22T04:00:00.000Z",
"location":"No location",
"description":"No description",
"isBusinessDay":false
}
]

【手順6：予約フォーム側の設定】
・フォーム管理画面の「カレンダーURL」欄に、手順4でコピーしたWebアプリURLをそのまま貼り付け
・フォーム側の仕様に合わせて、必要なら startTime / endTime をJSで付与してアクセス
（例：当月分の先頭と末尾を計算してクエリに付けて呼び出す）

【手順7：○×判定の基本ロジック（フォーム側実装イメージ）】

取得したJSON配列の各イベントの startTime～endTime をブロックとして把握

カレンダー表示用の全スロット（例：30分刻み）を用意

各スロットがイベントの時間帯に重なるか判定
　・重なる → 「×」
　・重ならない → 「○」
※日またぎや終日予定がある場合も同様に時間帯重なりで判定

【手順8：よくあるつまずき】
・「権限不足」→ デプロイ時の「アクセスできるユーザー」を再確認。匿名アクセスが必要なら「全員」に設定
・「何も返らない」→ startTime / endTime のISO8601表記（…Zで終わるUTC）を確認
・「日本時間と合わない」→ 本GASはAsia/Tokyoにフォールバック済み（内部でJST換算）。それでもズレるときは、引数の時間生成側（フォームJS）を点検
・「カレンダーIDが違う」→ 個人用とリソース用など複数ある場合は正しいIDを再確認

【手順9：日付パラメータの作り方（フォーム側JS参考）】
・当月の1日00:00:00Z～末日23:59:59Z を作って付与する
・または「表示中の週／月」に合わせて動的に付与して再取得（ページ送りのたびに再読込）

【手順10：運用のコツ】
・「社内の手動予定（休憩・移動）」もカレンダーに必ず登録する（空き誤表示防止）
・名称ルール（例：「[予約]」「[私用]」など）を決めておくと、フォーム側で追加のフィルタも可能
・大量予定で重い場合：期間を週単位で絞って取得 / クライアント側でキャッシュ

【備考（コード仕様のポイント）】
・startTime / endTime を必須パラメータとして受け取り、該当期間のイベントをJSONで返却
・タイムゾーンはスクリプト設定 or Asia/Tokyo へフォールバック
・エラー時はJSONで { "error": "…" } を返却
（詳細は提供コード参照）